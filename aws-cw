#!/bin/bash

set -e

AWS_REGION=${AWS_REGION:-us-east-1}

# Define color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Define icons
CHECK_MARK="\xE2\x9C\x94"
CROSS_MARK="\xE2\x9D\x8C"
INFO="\xF0\x9F\x93\xA6"
ARROW_UP="\xE2\x87\xB8"

usage() {
  echo -e "${YELLOW}${INFO} Usage: $(basename $0) [cloudwatch log group name] [cloudwatch log group's stream name] [-o|--outfile file_name] [-p|--profile AWS Profile Name] [-r|--region AWS Region Name]${NC}"
}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -o|--outfile)
      OUTFILE="$2"
      shift
      shift
      ;;
    -r|--region)
      AWS_REGION="$2"
      shift
      shift
      ;;
    -p|--profile)
      AWS_PROFILE="$2"
      shift
      shift
      ;;
    -h|--help)
      usage
      shift
      exit 0
      ;;
    -*|--*)
      echo -e "${RED}${CROSS_MARK} Unknown option $1${NC}"
      usage
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}"

AWS_CW_LOGGROUP=$1
AWS_CW_LOGSTREAM=$2

IS_FZF=false
[[ -t 1 && "$(type fzf &>/dev/null; echo $?)" -eq 0 ]] && IS_FZF=true

err() {
  echo -e "${RED}${CROSS_MARK} [$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*${NC}" >&2
  exit 1
}

# This function is a wrapper around the `fzf` command with predefined options to customize its appearance and behavior.
# It displays a fuzzy finder with a reverse layout, border, and custom color for labels.
# The preview window is positioned on the right side with a line border.
# This function takes additional arguments to further configure `fzf`.
__fzf_base_fzf() {
  fzf --ansi --height 50% --tmux 90%,70% \
    --layout reverse --min-height 20+ --border \
    --header-border horizontal \
    --border-label-pos 2 \
    --color 'label:white' \
    --no-multi \
    --preview-window 'right,80%' --preview-border line "$@"
}

# Prompt the user to choose an AWS profile using fzf.
#
# Exits 1 if the user does not choose any of the options.
choose_profile_interactive() {
  type aws-profiles &>/dev/null || { echo -e "${RED}${CROSS_MARK} ERROR: aws-profiles helper script is not available.${NC}"; exit 1;}
  local choice
  choice="$(aws-profiles | __fzf_base_fzf --border-label " 🤷 Profiles " || true)"
  if [[ -z "${choice}" ]]; then
    echo -e "${RED}${CROSS_MARK} error: you did not choose any of the options${NC}"
    exit 1
  else
    AWS_PROFILE="${choice}"
  fi
}

# Parse the output of a CLI command and concatenate it into the cli_parsed variable.
#
# This function takes an optional argument, cli_jq_query, which is the jq query to use to parse the output of the CLI command.
#
# The function will execute the CLI command, parse the output using the provided jq query, and then concatenate it into the cli_parsed variable.  If the output contains a "nextToken" field, the function will return the nextToken value.  If the output does not contain a "nextToken" field, the function will return the empty string.
__generic_pagination_parse() {
  if [ ! -z "$cli_output" ]; then
    if grep -q "Exception" <<< "${cli_output}"; then
      echo -e "${RED}${CROSS_MARK} Error: aws query returned an error: $cli_output${NC}"
      exit 1
    fi
    cli_parsed+="$(echo "$cli_output" | jq -r "${cli_jq_query}")"
    next_token=$(echo "$cli_output" | jq -r ".nextToken")
  else
    err "cli_output is empty"
  fi
}

# A generic function to get a list of items from AWS.
#
# This function takes two variables as input:
#  - cli_command: The CLI command to use to get the list of items.
#  - cli_jq_query: The jq query to use to parse the output of the CLI
#    command.
#
# The function will execute the CLI command, parse the output using the
# provided jq query, and then loop over the output and concatenate it
# into the cli_parsed variable.  If the output contains a "nextToken"
# field, the function will loop over the output until there are no more
# items to retrieve from AWS.  The function will sleep for 1 second
# between each iteration of the loop.
__generic_getter() {
  if [[ -z "$cli_command" || -z "$cli_jq_query" ]]; then
    err "cli_command or cli_jq_query is not defined"
  fi
  cli_output=$($cli_command)
  __generic_pagination_parse
  while [ "$next_token" != "null" ]; do
    sleep 1
    cli_output=$($cli_command --next-token "$next_token")
    __generic_pagination_parse
  done
}

# Interactively choose a log group to query from.
#
# This function will query AWS for a list of log groups, and then use fzf to
# prompt the user to select one of the options.  If the user does not select
# an option, the function will exit with a non-zero status code.
choose_loggroup_interactive() {
  local choice
  local cli_command="aws logs describe-log-groups --region ${AWS_REGION} --profile ${AWS_PROFILE}"
  local cli_output
  local cli_parsed
  local cli_jq_query='.logGroups[] | "\(.logGroupName) , CreationTime: \(.creationTime / 1000 | strflocaltime("%Y-%m-%d %H:%m:%S %Z"))"'
  local next_token

  __generic_getter

  choice=$(echo "$cli_parsed" | __fzf_base_fzf --ansi --no-preview --border-label " 📂 Log Groups " | sed 's/^\*//g' | awk '{print $1}' || true)
  if [[ -z "${choice}" ]]; then
    echo -e "${RED}${CROSS_MARK} error: you did not choose any of the options${NC}"
    exit 1
  else
    AWS_CW_LOGGROUP="${choice}"
  fi
}

# Allows the user to interactively select a log stream from AWS CloudWatch.
# Retrieves and lists log streams for the specified log group in descending order based on the last event time.
# Uses fzf for interactive selection, and sets the chosen log stream name to AWS_CW_LOGSTREAM.
# Exits with an error message if no option is selected.
choose_logstream_interactive() {
  local choice
  local cli_command="aws logs describe-log-streams --log-group-name ${AWS_CW_LOGGROUP} --order-by LastEventTime --descending --region ${AWS_REGION} --profile ${AWS_PROFILE}"
  local cli_output
  local cli_parsed
  local cli_jq_query='.logStreams[] | "\(.logStreamName) , Last Event: \(.lastEventTimestamp / 1000 | strflocaltime("%Y-%m-%d %H:%m:%S %Z"))"'
  local next_token

  __generic_getter

  choice="$(echo "$cli_parsed" | __fzf_base_fzf --no-preview --border-label " 📝 Log Streams " | sed 's/^\*//g' | awk '{print $1}' || true)"
  if [[ -z "${choice}" ]]; then
    echo -e "${RED}${CROSS_MARK} error: you did not choose any of the options${NC}"
    exit 1
  else
    AWS_CW_LOGSTREAM="${choice}"
  fi
}

[[ -z ${AWS_PROFILE} ]] && {
  if ${IS_FZF}; then
    choose_profile_interactive
  else
    echo -e "${RED}${CROSS_MARK} AWS Profile is not defined!${NC}"
    exit 1
  fi
}

[[ -z ${AWS_CW_LOGGROUP} ]] && {
  if ${IS_FZF}; then
    choose_loggroup_interactive || { echo -e "${RED}${CROSS_MARK} Could not get log groups${NC}"; exit 1; }
  else
    echo -e "${RED}${CROSS_MARK} Log Group is not defined!${NC}"
    exit 1
  fi
}

[[ -z ${AWS_CW_LOGSTREAM} ]] && {
  if ${IS_FZF}; then
    choose_logstream_interactive || { echo -e "${RED}${CROSS_MARK} Could not get log streams${NC}"; exit 1; }
  else
    echo -e "${RED}${CROSS_MARK} Log Group's Stream is not defined!${NC}"
    exit 1
  fi
}

echo -e "${GREEN}${CHECK_MARK} AWS Profile:${NC} ${AWS_PROFILE}"
echo -e "${GREEN}${CHECK_MARK} AWS Region:${NC} ${AWS_REGION}"
echo -e "${GREEN}${CHECK_MARK} Log Group:${NC} ${AWS_CW_LOGGROUP}"
echo -e "${GREEN}${CHECK_MARK} Log Group Stream:${NC} ${AWS_CW_LOGSTREAM}"
echo -e "${GREEN}${CHECK_MARK} Command for direct query:${NC} $0 '${AWS_CW_LOGGROUP}' '${AWS_CW_LOGSTREAM}' --profile ${AWS_PROFILE} --region ${AWS_REGION} "
[[ ! -z ${OUTFILE} ]] && { echo -e "${GREEN}${ARROW_UP} Redirecting output to:${NC} ${OUTFILE}"; }

# Retrieves log events from a specified AWS CloudWatch log group and log stream.
# If log events are found, they are either printed to the console or redirected to an output file.
# If fzf is available and enabled, allows interactive selection of request IDs from the log events.
# Exits with an error message if no log events are retrieved.
get_logs() {
    local log_events log_events_json
    log_events_json=$(aws logs get-log-events \
        --log-group-name ${AWS_CW_LOGGROUP} \
        --log-stream-name ${AWS_CW_LOGSTREAM} \
        --region ${AWS_REGION} \
        --profile ${AWS_PROFILE})
    if [[ -z "${log_events_json}" || $(echo "${log_events_json}" | jq '.events | length') -eq 0 ]]; then
      echo -e "${RED}${CROSS_MARK} Could not get log events${NC}"
      exit 1
    fi
    log_events=$(echo "${log_events_json}" \
        | jq -r '.events[].message')
    [[ -n "${OUTFILE}" ]] && { echo -e "${log_events}"; return ; }
    if ${IS_FZF}; then
      request_ids=$(echo "${log_events}" | grep -i "START RequestId" | awk '{print $3}' | sed 's/"//g')
      echo -e "${request_ids}" | __fzf_base_fzf --ansi --height 90% \
        --border-label " 📒 Log Events " \
        --header "CTRL-Y/E: up/down" \
        --header-first \
        --tiebreak begin \
        --bind ctrl-y:preview-up,ctrl-e:preview-down \
        --preview-window right,80% \
        --preview-border rounded \
        --preview-label " Log " \
        --preview-label-pos 0 \
        --preview "echo '${log_events}' | sed -n '/START RequestId: {}/,/REPORT RequestId: {}/p'"
    else
      echo -e "${log_events}"
    fi
}

REDIRECT=/dev/tty

[[ -n ${OUTFILE} ]] && REDIRECT=${OUTFILE}

get_logs > ${REDIRECT}

